
GPIO_Interrupt_Driver.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000218  08000198  08000198  00001198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  080003b0  080003b8  000013b8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  080003b0  080003b0  000013b8  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  080003b0  080003b0  000013b8  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  080003b0  080003b8  000013b8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080003b0  080003b0  000013b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080003b4  080003b4  000013b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000000  20000000  20000000  000013b8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000000  080003b8  00002000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000001c  080003b8  0000201c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000013b8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000094d  00000000  00000000  000013e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000304  00000000  00000000  00001d35  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000088  00000000  00000000  00002040  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000057  00000000  00000000  000020c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000dd9e  00000000  00000000  0000211f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00000c5a  00000000  00000000  0000febd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0005036a  00000000  00000000  00010b17  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00060e81  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000108  00000000  00000000  00060ec4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007d  00000000  00000000  00060fcc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	@ (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	@ (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000000 	.word	0x20000000
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08000398 	.word	0x08000398

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	@ (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	@ (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	@ (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000004 	.word	0x20000004
 80001d4:	08000398 	.word	0x08000398

080001d8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80001d8:	b480      	push	{r7}
 80001da:	b083      	sub	sp, #12
 80001dc:	af00      	add	r7, sp, #0
 80001de:	4603      	mov	r3, r0
 80001e0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80001e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80001e6:	2b00      	cmp	r3, #0
 80001e8:	db0b      	blt.n	8000202 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80001ea:	79fb      	ldrb	r3, [r7, #7]
 80001ec:	f003 021f 	and.w	r2, r3, #31
 80001f0:	4907      	ldr	r1, [pc, #28]	@ (8000210 <__NVIC_EnableIRQ+0x38>)
 80001f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80001f6:	095b      	lsrs	r3, r3, #5
 80001f8:	2001      	movs	r0, #1
 80001fa:	fa00 f202 	lsl.w	r2, r0, r2
 80001fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000202:	bf00      	nop
 8000204:	370c      	adds	r7, #12
 8000206:	46bd      	mov	sp, r7
 8000208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800020c:	4770      	bx	lr
 800020e:	bf00      	nop
 8000210:	e000e100 	.word	0xe000e100

08000214 <exti_0_Init>:
#define EXTI_IMR         (1U << 0)

#define EXTI_RSTSR       (1U << 0)


void exti_0_Init(void) {
 8000214:	b580      	push	{r7, lr}
 8000216:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000218:	b672      	cpsid	i
}
 800021a:	bf00      	nop

	__disable_irq();

	 // enable clock acess to system configuration controller

	RCC->APB2ENR |= RCC_SYSCFGEN ;
 800021c:	4b0f      	ldr	r3, [pc, #60]	@ (800025c <exti_0_Init+0x48>)
 800021e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000220:	4a0e      	ldr	r2, [pc, #56]	@ (800025c <exti_0_Init+0x48>)
 8000222:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000226:	6453      	str	r3, [r2, #68]	@ 0x44

	// unmask EXTI0

	EXTI->IMR |= EXTI_IMR ;
 8000228:	4b0d      	ldr	r3, [pc, #52]	@ (8000260 <exti_0_Init+0x4c>)
 800022a:	681b      	ldr	r3, [r3, #0]
 800022c:	4a0c      	ldr	r2, [pc, #48]	@ (8000260 <exti_0_Init+0x4c>)
 800022e:	f043 0301 	orr.w	r3, r3, #1
 8000232:	6013      	str	r3, [r2, #0]

	// select trigger type : rising edge

	EXTI->RTSR |= EXTI_RSTSR ;
 8000234:	4b0a      	ldr	r3, [pc, #40]	@ (8000260 <exti_0_Init+0x4c>)
 8000236:	689b      	ldr	r3, [r3, #8]
 8000238:	4a09      	ldr	r2, [pc, #36]	@ (8000260 <exti_0_Init+0x4c>)
 800023a:	f043 0301 	orr.w	r3, r3, #1
 800023e:	6093      	str	r3, [r2, #8]

	// PORTA for EXTI0

	SYSCFG->EXTICR[0] &= ~SYSCFG_EXTICR0;
 8000240:	4b08      	ldr	r3, [pc, #32]	@ (8000264 <exti_0_Init+0x50>)
 8000242:	689b      	ldr	r3, [r3, #8]
 8000244:	4a07      	ldr	r2, [pc, #28]	@ (8000264 <exti_0_Init+0x50>)
 8000246:	f023 0301 	bic.w	r3, r3, #1
 800024a:	6093      	str	r3, [r2, #8]

	// Enable EXTI0 line in NVIC

      NVIC_EnableIRQ(EXTI0_IRQn);
 800024c:	2006      	movs	r0, #6
 800024e:	f7ff ffc3 	bl	80001d8 <__NVIC_EnableIRQ>
  __ASM volatile ("cpsie i" : : : "memory");
 8000252:	b662      	cpsie	i
}
 8000254:	bf00      	nop

	// enable global interrupts

	__enable_irq();
}
 8000256:	bf00      	nop
 8000258:	bd80      	pop	{r7, pc}
 800025a:	bf00      	nop
 800025c:	40023800 	.word	0x40023800
 8000260:	40013c00 	.word	0x40013c00
 8000264:	40013800 	.word	0x40013800

08000268 <GPIO_Init>:


void GPIO_Init(void) {
 8000268:	b480      	push	{r7}
 800026a:	af00      	add	r7, sp, #0


	// enable clock access to Port D and A

	 RCC->AHB1ENR |= (GPIODEN | GPIOAEN ) ;
 800026c:	4b0b      	ldr	r3, [pc, #44]	@ (800029c <GPIO_Init+0x34>)
 800026e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000270:	4a0a      	ldr	r2, [pc, #40]	@ (800029c <GPIO_Init+0x34>)
 8000272:	f043 0309 	orr.w	r3, r3, #9
 8000276:	6313      	str	r3, [r2, #48]	@ 0x30

	// set PD12 pin mode to digital output : 01

	 GPIOD->MODER |= GPIOD_MODER_1;
 8000278:	4b09      	ldr	r3, [pc, #36]	@ (80002a0 <GPIO_Init+0x38>)
 800027a:	681b      	ldr	r3, [r3, #0]
 800027c:	4a08      	ldr	r2, [pc, #32]	@ (80002a0 <GPIO_Init+0x38>)
 800027e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8000282:	6013      	str	r3, [r2, #0]

	 GPIOD->MODER &= ~GPIOD_MODER_2;
 8000284:	4b06      	ldr	r3, [pc, #24]	@ (80002a0 <GPIO_Init+0x38>)
 8000286:	681b      	ldr	r3, [r3, #0]
 8000288:	4a05      	ldr	r2, [pc, #20]	@ (80002a0 <GPIO_Init+0x38>)
 800028a:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 800028e:	6013      	str	r3, [r2, #0]

}
 8000290:	bf00      	nop
 8000292:	46bd      	mov	sp, r7
 8000294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000298:	4770      	bx	lr
 800029a:	bf00      	nop
 800029c:	40023800 	.word	0x40023800
 80002a0:	40020c00 	.word	0x40020c00

080002a4 <main>:

static void exti_callback(void);



int main(void) {
 80002a4:	b580      	push	{r7, lr}
 80002a6:	af00      	add	r7, sp, #0

	 GPIO_Init() ;
 80002a8:	f7ff ffde 	bl	8000268 <GPIO_Init>

	 exti_0_Init();
 80002ac:	f7ff ffb2 	bl	8000214 <exti_0_Init>

	while (1) {
 80002b0:	bf00      	nop
 80002b2:	e7fd      	b.n	80002b0 <main+0xc>

080002b4 <exti_callback>:

	}
}


static void exti_callback(void) {
 80002b4:	b480      	push	{r7}
 80002b6:	af00      	add	r7, sp, #0

	// toggle LED PD12

	GPIOD->ODR ^= LED_ON;
 80002b8:	4b05      	ldr	r3, [pc, #20]	@ (80002d0 <exti_callback+0x1c>)
 80002ba:	695b      	ldr	r3, [r3, #20]
 80002bc:	4a04      	ldr	r2, [pc, #16]	@ (80002d0 <exti_callback+0x1c>)
 80002be:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 80002c2:	6153      	str	r3, [r2, #20]

}
 80002c4:	bf00      	nop
 80002c6:	46bd      	mov	sp, r7
 80002c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002cc:	4770      	bx	lr
 80002ce:	bf00      	nop
 80002d0:	40020c00 	.word	0x40020c00

080002d4 <EXTI0_IRQHandler>:



void EXTI0_IRQHandler(void){
 80002d4:	b580      	push	{r7, lr}
 80002d6:	af00      	add	r7, sp, #0

	// check if interrupt occured

	if( (EXTI->PR & LINE0) !=0) {
 80002d8:	4b07      	ldr	r3, [pc, #28]	@ (80002f8 <EXTI0_IRQHandler+0x24>)
 80002da:	695b      	ldr	r3, [r3, #20]
 80002dc:	f003 0301 	and.w	r3, r3, #1
 80002e0:	2b00      	cmp	r3, #0
 80002e2:	d007      	beq.n	80002f4 <EXTI0_IRQHandler+0x20>

		// clear PR flag

		EXTI->PR |= LINE0;
 80002e4:	4b04      	ldr	r3, [pc, #16]	@ (80002f8 <EXTI0_IRQHandler+0x24>)
 80002e6:	695b      	ldr	r3, [r3, #20]
 80002e8:	4a03      	ldr	r2, [pc, #12]	@ (80002f8 <EXTI0_IRQHandler+0x24>)
 80002ea:	f043 0301 	orr.w	r3, r3, #1
 80002ee:	6153      	str	r3, [r2, #20]
       // Do something

		exti_callback();
 80002f0:	f7ff ffe0 	bl	80002b4 <exti_callback>


	}

}
 80002f4:	bf00      	nop
 80002f6:	bd80      	pop	{r7, pc}
 80002f8:	40013c00 	.word	0x40013c00

080002fc <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80002fc:	480d      	ldr	r0, [pc, #52]	@ (8000334 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80002fe:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000300:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000304:	480c      	ldr	r0, [pc, #48]	@ (8000338 <LoopForever+0x6>)
  ldr r1, =_edata
 8000306:	490d      	ldr	r1, [pc, #52]	@ (800033c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000308:	4a0d      	ldr	r2, [pc, #52]	@ (8000340 <LoopForever+0xe>)
  movs r3, #0
 800030a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800030c:	e002      	b.n	8000314 <LoopCopyDataInit>

0800030e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800030e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000310:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000312:	3304      	adds	r3, #4

08000314 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000314:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000316:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000318:	d3f9      	bcc.n	800030e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800031a:	4a0a      	ldr	r2, [pc, #40]	@ (8000344 <LoopForever+0x12>)
  ldr r4, =_ebss
 800031c:	4c0a      	ldr	r4, [pc, #40]	@ (8000348 <LoopForever+0x16>)
  movs r3, #0
 800031e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000320:	e001      	b.n	8000326 <LoopFillZerobss>

08000322 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000322:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000324:	3204      	adds	r2, #4

08000326 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000326:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000328:	d3fb      	bcc.n	8000322 <FillZerobss>


/* Call static constructors */
  bl __libc_init_array
 800032a:	f000 f811 	bl	8000350 <__libc_init_array>
/* Call the application's entry point.*/

  bl main
 800032e:	f7ff ffb9 	bl	80002a4 <main>

08000332 <LoopForever>:

LoopForever:
  b LoopForever
 8000332:	e7fe      	b.n	8000332 <LoopForever>
  ldr   r0, =_estack
 8000334:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000338:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800033c:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000340:	080003b8 	.word	0x080003b8
  ldr r2, =_sbss
 8000344:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000348:	2000001c 	.word	0x2000001c

0800034c <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800034c:	e7fe      	b.n	800034c <ADC_IRQHandler>
	...

08000350 <__libc_init_array>:
 8000350:	b570      	push	{r4, r5, r6, lr}
 8000352:	4d0d      	ldr	r5, [pc, #52]	@ (8000388 <__libc_init_array+0x38>)
 8000354:	4c0d      	ldr	r4, [pc, #52]	@ (800038c <__libc_init_array+0x3c>)
 8000356:	1b64      	subs	r4, r4, r5
 8000358:	10a4      	asrs	r4, r4, #2
 800035a:	2600      	movs	r6, #0
 800035c:	42a6      	cmp	r6, r4
 800035e:	d109      	bne.n	8000374 <__libc_init_array+0x24>
 8000360:	4d0b      	ldr	r5, [pc, #44]	@ (8000390 <__libc_init_array+0x40>)
 8000362:	4c0c      	ldr	r4, [pc, #48]	@ (8000394 <__libc_init_array+0x44>)
 8000364:	f000 f818 	bl	8000398 <_init>
 8000368:	1b64      	subs	r4, r4, r5
 800036a:	10a4      	asrs	r4, r4, #2
 800036c:	2600      	movs	r6, #0
 800036e:	42a6      	cmp	r6, r4
 8000370:	d105      	bne.n	800037e <__libc_init_array+0x2e>
 8000372:	bd70      	pop	{r4, r5, r6, pc}
 8000374:	f855 3b04 	ldr.w	r3, [r5], #4
 8000378:	4798      	blx	r3
 800037a:	3601      	adds	r6, #1
 800037c:	e7ee      	b.n	800035c <__libc_init_array+0xc>
 800037e:	f855 3b04 	ldr.w	r3, [r5], #4
 8000382:	4798      	blx	r3
 8000384:	3601      	adds	r6, #1
 8000386:	e7f2      	b.n	800036e <__libc_init_array+0x1e>
 8000388:	080003b0 	.word	0x080003b0
 800038c:	080003b0 	.word	0x080003b0
 8000390:	080003b0 	.word	0x080003b0
 8000394:	080003b4 	.word	0x080003b4

08000398 <_init>:
 8000398:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800039a:	bf00      	nop
 800039c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800039e:	bc08      	pop	{r3}
 80003a0:	469e      	mov	lr, r3
 80003a2:	4770      	bx	lr

080003a4 <_fini>:
 80003a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80003a6:	bf00      	nop
 80003a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80003aa:	bc08      	pop	{r3}
 80003ac:	469e      	mov	lr, r3
 80003ae:	4770      	bx	lr
